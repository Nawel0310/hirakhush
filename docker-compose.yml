version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: hirakhush-postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hirakhush-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend Strapi
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        DATABASE_CLIENT: ${DATABASE_CLIENT}
        DATABASE_HOST: ${DATABASE_HOST}
        DATABASE_PORT: ${DATABASE_PORT}
        DATABASE_NAME: ${DATABASE_NAME}
        DATABASE_USERNAME: ${DATABASE_USERNAME}
        DATABASE_PASSWORD: ${DATABASE_PASSWORD}
        DATABASE_SSL: ${DATABASE_SSL}
        APP_KEYS: ${APP_KEYS}
        API_TOKEN_SALT: ${API_TOKEN_SALT}
        ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
        TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
        ENCRYPTION_KEY: ${ENCRYPTION_KEY}
        HOST: ${HOST}
        PORT: ${PORT}
    container_name: hirakhush-backend
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: postgres
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_SSL: ${DATABASE_SSL}
      NODE_ENV: ${NODE_ENV}
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      HOST: ${HOST}
      PORT: ${PORT}
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ./backend/public/uploads:/opt/app/public/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hirakhush-network
    restart: unless-stopped
    expose:
      - "4000"

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_STRAPI_URL: ${NEXT_PUBLIC_STRAPI_URL}
    container_name: hirakhush-frontend
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      NEXT_PUBLIC_STRAPI_URL: ${NEXT_PUBLIC_STRAPI_URL}
      NEXT_PUBLIC_STRAPI_API_URL: ${NEXT_PUBLIC_STRAPI_API_URL}
      STRAPI_URL: ${STRAPI_URL}
    depends_on:
      - backend
    networks:
      - hirakhush-network
    restart: unless-stopped
    expose:
      - "3000"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hirakhush-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./backend/public/uploads:/var/www/uploads:ro
    depends_on:
      - backend
      - frontend
    networks:
      - hirakhush-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  hirakhush-network:
    driver: bridge